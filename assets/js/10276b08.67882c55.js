"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7005],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return b}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),b=o,k=d["".concat(c,".").concat(b)]||d[b]||u[b]||i;return n?a.createElement(k,r(r({ref:t},s),{},{components:n})):a.createElement(k,r({ref:t},s))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9512:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return b},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],l={sidebar_position:4},c="Background Mode",p={unversionedId:"basics/background-mode",id:"version-3.2/basics/background-mode",title:"Background Mode",description:"React Native Track Player supports playing audio while your app is in the",source:"@site/versioned_docs/version-3.2/basics/background-mode.md",sourceDirName:"basics",slug:"/basics/background-mode",permalink:"/docs/3.2/basics/background-mode",editUrl:"https://github.com/doublesymmetry/react-native-track-player/tree/main/docs/versioned_docs/version-3.2/basics/background-mode.md",tags:[],version:"3.2",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"app",previous:{title:"Playback Service",permalink:"/docs/3.2/basics/playback-service"},next:{title:"Platform Support",permalink:"/docs/3.2/basics/platform-support"}},s={},u=[{value:"Android",id:"android",level:2},{value:"Notification",id:"notification",level:3},{value:"iOS",id:"ios",level:2},{value:"iOS Simulator",id:"ios-simulator",level:3},{value:"Windows",id:"windows",level:2}],d={toc:u};function b(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"background-mode"},"Background Mode"),(0,i.kt)("p",null,"React Native Track Player supports playing audio while your app is in the\nbackground on all supported platforms."),(0,i.kt)("h2",{id:"android"},"Android"),(0,i.kt)("p",null,"Background audio playback works right out of the box. By default, the audio will\ncontinue to play, not only when the app is suspended in the background, but also\nafter the app is closed by the user. If that is not the desired behavior, you\ncan disable it with the ",(0,i.kt)("inlineCode",{parentName:"p"},"android.appKilledPlaybackBehavior")," property in\n",(0,i.kt)("inlineCode",{parentName:"p"},"updateOptions"),"."),(0,i.kt)("p",null,"In this case, the audio will still play while the app is open in the background.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"TrackPlayer.updateOptions({\n    android: {\n        // This is the default behavior\n        appKilledPlaybackBehavior: AppKilledPlaybackBehavior.ContinuePlayback\n    },\n    ...\n});\n")),(0,i.kt)("p",null,"Please look at the ",(0,i.kt)("a",{parentName:"p",href:"/docs/3.2/api/constants/app-killed-playback-behavior"},(0,i.kt)("inlineCode",{parentName:"a"},"AppKilledPlaybackBehavior")),"\ndocumentation for all the possible settings and how they behave."),(0,i.kt)("p",null,"Please note that while your app is in background, your UI might be unmounted by\nReact Native. Event listeners added in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/3.2/basics/playback-service"},"playback service"),"\nwill continue to receive events."),(0,i.kt)("h3",{id:"notification"},"Notification"),(0,i.kt)("p",null,"The notification will only be visible if the following are true:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AppKilledPlaybackBehavior.ContinuePlayback")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"AppKilledPlaybackBehavior.PausePlayback")," are selected."),(0,i.kt)("li",{parentName:"ul"},"Android has not killed the playback service due to no memory, crash, or other issue.")),(0,i.kt)("p",null,"Your app will be opened when the notification is tapped. You can implement a\ncustom initialization (e.g.: opening directly the player UI) by using the\n",(0,i.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/linking"},"Linking API")," looking for the\n",(0,i.kt)("inlineCode",{parentName:"p"},"trackplayer://notification.click")," URI."),(0,i.kt)("h2",{id:"ios"},"iOS"),(0,i.kt)("p",null,"To allow background audio playback on iOS, you need to activate the 'Audio,\nAirplay and Picture in Picture' background mode in Xcode. Without activating it,\nthe audio will only play when the app is in the foreground."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://developer.apple.com/library/content/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/Art/background_modes_2x.png",alt:"Xcode Background Capability"})),(0,i.kt)("h3",{id:"ios-simulator"},"iOS Simulator"),(0,i.kt)("p",null,"As of iOS Simulator version 11, Apple has removed support for Control Center and\nNow Playing Info from the simulator. You will not be able to test lock screen\ncontrols on recent versions of iOS Simulator. You can either test on real\ndevices, or download older versions of the iOS Simulator."),(0,i.kt)("h2",{id:"windows"},"Windows"),(0,i.kt)("p",null,"To allow background audio playback on Windows, you need to add the background\ncapability in the app manifest, as ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/windows/uwp/audio-video-camera/background-audio#background-media-playback-manifest-capability"},"documented by Microsoft")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<Capabilities>\n    <uap3:Capability Name="backgroundMediaPlayback"/>\n</Capabilities>\n')))}b.isMDXComponent=!0}}]);