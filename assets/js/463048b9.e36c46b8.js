"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9264],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=c(n),g=o,h=d["".concat(p,".").concat(g)]||d[g]||u[g]||a;return n?r.createElement(h,s(s({ref:t},l),{},{components:n})):r.createElement(h,s({ref:t},l))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1529:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={sidebar_position:2},p="Saving Progress",c={unversionedId:"guides/saving-progress",id:"guides/saving-progress",title:"Saving Progress",description:"A common use-case is to store the users progress on a particular Track",source:"@site/docs/guides/saving-progress.md",sourceDirName:"guides",slug:"/guides/saving-progress",permalink:"/docs/next/guides/saving-progress",editUrl:"https://github.com/doublesymmetry/react-native-track-player/tree/main/docs/docs/guides/saving-progress.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"app",previous:{title:"Offline Playback",permalink:"/docs/next/guides/offline-playback"},next:{title:"Sleeptimers",permalink:"/docs/next/guides/sleeptimers"}},l={},u=[{value:"Naive Approach",id:"naive-approach",level:2},{value:"Recommended Approach",id:"recommended-approach",level:2}],d={toc:u};function g(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"saving-progress"},"Saving Progress"),(0,a.kt)("p",null,"A common use-case is to store the users progress on a particular ",(0,a.kt)("inlineCode",{parentName:"p"},"Track"),"\nsomewhere so that when they leave and come back, they can pick up right where\nthey left off. To do this you need to listen for progress updates and then\nstore the progress somewhere. There are two high level ways of getting this\ndone."),(0,a.kt)("h2",{id:"naive-approach"},"Naive Approach"),(0,a.kt)("p",null,"One approach could be to use the progress events/updates that the ",(0,a.kt)("inlineCode",{parentName:"p"},"useProgress"),"\nhook provides. This isn't a very good idea and here's why:"),(0,a.kt)("p",null,'Users can listen to audio both "in-App" and "Remotely". In-App would be defined\nas playback while the user has the app opened on screen. However, whenever\naudio is being played in the background/remotely. For example: playback on the\nlockscreen, carplay, etc. In these situations ',(0,a.kt)("strong",{parentName:"p"},"the UI is not mounted"),", meaning\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"useProgress")," hook, or really any event listeners that are registered\ninside of your App UI tree (anything called as a result of\n",(0,a.kt)("inlineCode",{parentName:"p"},"AppRegistry.registerComponent(appName, () => App);")," in your ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js")," file)\n",(0,a.kt)("strong",{parentName:"p"},"WILL NOT EXECUTE"),"."),(0,a.kt)("p",null,"In a nutshell, if you do this, you're progress ",(0,a.kt)("strong",{parentName:"p"},"will not")," update when the user\nis playing back in Remote contexts and therefore your app will seem buggy."),(0,a.kt)("h2",{id:"recommended-approach"},"Recommended Approach"),(0,a.kt)("p",null,"The correct way to handle this is to track progress in the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/next/basics/playback-service"},"Playback Service"),", based on the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Event.PlaybackProgressUpdated")," event. These events fire all the time, including\nwhen your app is playing back remotely."))}g.isMDXComponent=!0}}]);